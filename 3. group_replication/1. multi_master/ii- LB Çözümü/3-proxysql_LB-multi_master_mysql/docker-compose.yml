# Önce mysql master servisini başlat
# - monitor_user ve monitor_password ile monitor kullanıcısı oluşturuyoruz.
# - proxysql

# ve ardından mysql slave servislerini oluşturuyoruz.
# Sonra proxysql ve phpmyadmin servislerini oluşturuyoruz.

services:
  setup:
    image: mysql:5.7
    hostname: setup
    container_name: setup
    entrypoint: /run.sh
    # entrypoint: tail -f /dev/null
    volumes:
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      - ./run.sh:/run.sh
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    depends_on:
      master3:
        condition: service_healthy

  master1:
    image: mysql:5.7
    hostname: master1
    container_name: master1
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=1
      --group_replication_local_address="master1:24901"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # Config dosyalarını yükleyelim
      - ./my.cnf:/etc/mysql/my.cnf
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf
      - ./2_group_replication.cnf:/etc/mysql/conf.d/2_group_replication.cnf
      # - ./log.cnf:/etc/mysql/conf.d/log.cnf
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      # - ./1_create_users.sql:/docker-entrypoint-initdb.d/1_create_users.sql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  master2:
    image: mysql:5.7
    hostname: master2
    container_name: master2
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=2
      --group_replication_local_address="master2:24902"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # Config dosyalarını yükleyelim
      - ./my.cnf:/etc/mysql/my.cnf
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf
      - ./2_group_replication.cnf:/etc/mysql/conf.d/2_group_replication.cnf
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      # - ./1_create_users.sql:/docker-entrypoint-initdb.d/1_create_users.sql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      master1:
        condition: service_healthy

  master3:
    image: mysql:5.7
    hostname: master3
    container_name: master3
    restart: always
    command: >
      --defaults-file=/etc/mysql/my.cnf
      --server-id=3
      --group_replication_local_address="master3:24903"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      # Config dosyalarını yükleyelim
      - ./my.cnf:/etc/mysql/my.cnf
      - ./1_network.cnf:/etc/mysql/conf.d/1_network.cnf
      - ./2_group_replication.cnf:/etc/mysql/conf.d/2_group_replication.cnf
      # Başlangıçta çalıştırılacak sql ve kabuk dosyalarını yükleyelim
      # - ./1_create_users.sql:/docker-entrypoint-initdb.d/1_create_users.sql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      TZ: Europe/Istanbul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot_password"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      master2:
        condition: service_healthy

  proxysql:
    image: proxysql/proxysql:2.5.5
    container_name: proxysql
    hostname: proxysql
    ports:
      - "6032:6032"  # Admin port
      - "6033:6033"  # MySQL port
    volumes:
      - ./proxysql.cnf:/etc/proxysql.cnf:ro
      - ./proxysql_init.sql:/etc/proxysql_init.sql:ro
    healthcheck:
      test: ["CMD", "mysql", "-h", "127.0.0.1", "-P", "6032", "-u", "admin", "-padmin", "-e", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      master1:
        condition: service_healthy
      master2:
        condition: service_healthy
      master3:
        condition: service_healthy
      setup:
        condition: service_healthy
